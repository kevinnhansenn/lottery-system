swagger: '2.0'
schemes:
  - http
  - https
host: http://0.0.0.0:3456
basePath: /v2
referenceDocs:
  showConsole: true
info:
  description: |
    # Coding Challenge
    - We are building a web-based lottery system.
    - In this system, we are selling tickets and perform the draws continuously and periodically.
    - After the previous draw, contestants can start to participate in the next draw.
    - Our system will assign 1 ticket per contestant.
    - Every ticket is unique.
    - Every __x__ seconds there will be a draw and there will be only **1** winner.
    - And the system will response to contestants whether they win or not after the draw.g
    - All tickets in 1 draw will be discarded once said draw is completed.
    - You are expected to build an back-end server for our front-end application.
    - We suggest this should be an RESTful API server, but you can adopt whatever approach you find suitable.
    - We are using Node.js and Ruby(for legacy system only), but you can use whatever language / tools you prefer.
    - Take a reasonable timeframe to complete the projecIt should not take longer than **1 working days**.
    - After completion, please send your work via Email link to a repo on any git hosting services.
    - If you have any questions, don't hesitate to contact us via dev.platform@gogotech.hk or reply to the hiring lead(s).

    ### Bonus Points

    It would be a bonus point if you can complete the following:

    1. Write code to validate your system, for example using JUnit, Gherkins or other testing framework of your choice.
    2. Outline the limitation of your system and how you will improve it.
    3. Your system should be able to deploy in 1 command without using superuser privileges in the host system.

    And no worry, please skip this part if you has spent more than 1 working day on this project already.
    # Approach
    The backend endpoints will be divided into 2 parts (internal and public).
    - Internal APIs are used for backend engineer to start and manage lottery backend system.
    - Public APIs are used for contestants to buy and check their lottery tickets.
    # Testing Results
    ![Testing Results Snapshot](https://kevinhansen.sgp1.digitaloceanspaces.com/public/app.test.png)
    # Limitations
    1. Since we are only using REST API server, there is no way to notify the contestant in directly once
    she won the draw, the contestant need to make request continiously to backend to check her updated ticket
    status. It is recommended to use WebSocket server to enhance the experience.
    2. From Development perspective, the data sctructure should not be a plain object. It is recommended to use
    Class-based approach for easy scaling and improve readability of the code.
    3. End to end testing need to be implemented to avaoid manual testing everytime. To test the timer and whether
    the tickets are stored properly. Just for improving the code reliability.
    # Authentication
    For the sake of simplicity, the API key will be in plain text and just need be attached in the request's header
    for a simple authentication check.

    <!-- ReDoc-Inject: <security-definitions> -->
  version: 1.0.0
  title: Lottery System
  contact:
    email: k4h5.24@yahoo.com
    url: https://github.com/kevinnhansenn/lottery-system
  x-logo:
    url: 'https://kevinhansen.sgp1.digitaloceanspaces.com/public/lottery.png'
    altText: Lottery logo
tags:
  - name: system
    description: Everything about your lottery backend system.
  - name: draws
    description: Lottery draw results generated by backend.
  - name: ticket
    description: Lottery ticket owned by contestant.
  - name: history
    description: All lottery tickets owned by contestant.
x-tagGroups:
  - name: Internal
    tags:
      - system
      - draws
  - name: Public
    tags:
      - ticket
      - history
securityDefinitions:
  internal_api_key:
    description: |
      Internal API key is required to execute **Internal Routes**.
      - API Key: `internal-api-key`.
    type: apiKey
    name: X-INTERNAL-API-KEY
    in: header
  contestant_api_key:
    description: |
      Contenstant API key is required to execute **Public Routes**.
      - API Key: `{contestant_id}-api-key`.
    type: apiKey
    name: X-CONTESTANT-API-KEY
    in: header
x-servers:
  - url: //0.0.0.0:3456
    description: Default server
paths:
  /api/v1/internal/start_system:
    post:
      tags:
        - system
      summary: Start lottery system
      description: Internal API route used for starting up the lottery backend system.
      operationId: startSystem
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Initial config of the lottery system
          required: true
          schema:
            type: object
            properties:
              draw_interval:
                type: integer
                description: |
                  Interval of drawing the lottery (in second)
                  - If draw_interval > 0, lottery system will be activated with `draw_interval`s interval.
                  - Else, lottery system will be deactivated.
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/SystemStatus'
        '400':
          description: Invalid Payload
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message
                default: draw_interval must be integer
        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedInternal'
      security:
        - internal_api_key: []
  /api/v1/internal/status_system:
    get:
      tags:
        - system
      summary: Check the status of the system
      description: Internal API route used for checking the status of lottery backend system.
      operationId: checkSystem
      produces:
        - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/SystemStatus'
        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedInternal'
      security:
        - internal_api_key: []
  /api/v1/internal/draw_history:
    get:
      tags:
        - draws
      summary: Retrieve all lottery draws
      description: Internal API route for retrieving all draw results since the system started.
      operationId: drawHistory
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                draw_no:
                  type: integer
                winning_contestant_id:
                  type: string
                winning_ticket_id:
                  type: string
                all_tickets_this_round:
                  type: array
                  description: All tickets that participate in this round
                  items:
                    type: object
                    properties:
                      contestant_id:
                        type: string
                      ticket_id:
                        type: string

        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedInternal'
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ServiceUnavailable'
      security:
        - internal_api_key: []
  /api/v1/public/buy_ticket:
    get:
      tags:
        - ticket
      summary: Buy lottery ticket
      description: Public API route used for buying a lottery ticket.
      operationId: buyTicket
      produces:
        - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            type: object
            properties:
              ticket_id:
                type: string
                description: Valid ticket_id for the next draw
        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedContestant'
        '403':
          description: Forbidden Operation
          schema:
            type: object
            properties:
              message:
                type: string
                default: You are only allow to possess one ticket for the next draw.
                description: Error message
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ServiceUnavailable'
      security:
        - contestant_api_key: []
  /api/v1/public/status_ticket:
    get:
      tags:
        - ticket
      summary: Check status of a ticket
      description: Public API route for checking the status of a lottery ticket.
      operationId: statusTicket
      produces:
        - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            type: object
            properties:
              ticket_id:
                type: string
                description: Your current ticket_id
              status:
                type: string
                default: waiting
                description: Ticket status
                enum:
                  - waiting
                  - win
                  - lose
        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedContestant'
        '404':
          description: Ticket Not Found
          schema:
            type: object
            properties:
              message:
                type: string
                default: You haven't purchase any lottery ticket.
                description: Error message
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ServiceUnavailable'
      security:
        - contestant_api_key: []
  /api/v1/public/my_tickets:
    get:
      tags:
        - history
      summary: Get all of my tickets history
      description: Public API route for retrieving all the tickets possessed by a contestant.
      operationId: myTickets
      produces:
        - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            type: object
            properties:
              active_ticket:
                type: string
                description: Your current and active ticket_id
              all_tickets:
                type: array
                description: All of your tickets
                items:
                  type: string
        '401':
          description: Unauthorized Operation
          schema:
            $ref: '#/definitions/UnauthorizedContestant'
        '503':
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ServiceUnavailable'
      security:
        - contestant_api_key: []
definitions:
  ServiceUnavailable:
    type: object
    properties:
      message:
        type: string
        default: Lottery system has not yet been started.
        description: Error message
  SystemStatus:
    type: object
    properties:
      status:
        type: string
        default: active
        description: System status
        enum:
          - active
          - inactive
  UnauthorizedInternal:
    type: object
    properties:
      message:
        type: string
        description: Error message
        default: Invalid Internal Token
  UnauthorizedContestant:
    type: object
    properties:
      message:
        type: string
        description: Error message
        default: Invalid Contestant Token